// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.5
// source: protos/order/order.proto

package order1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	OrderService_CreateOrder_FullMethodName     = "/OrderService/CreateOrder"
	OrderService_GetInfoOrder_FullMethodName    = "/OrderService/GetInfoOrder"
	OrderService_GetAllInfoOrder_FullMethodName = "/OrderService/GetAllInfoOrder"
	OrderService_DeleteOrder_FullMethodName     = "/OrderService/DeleteOrder"
)

// OrderServiceClient is the client API for OrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderServiceClient interface {
	CreateOrder(ctx context.Context, in *CreatOrderReq, opts ...grpc.CallOption) (OrderService_CreateOrderClient, error)
	GetInfoOrder(ctx context.Context, in *GetInfoOrderReq, opts ...grpc.CallOption) (*Order, error)
	GetAllInfoOrder(ctx context.Context, in *GetAllInfoOrderReq, opts ...grpc.CallOption) (*GetAllInfoOrderRes, error)
	DeleteOrder(ctx context.Context, in *DeleteOrderReq, opts ...grpc.CallOption) (*Empty, error)
}

type orderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderServiceClient(cc grpc.ClientConnInterface) OrderServiceClient {
	return &orderServiceClient{cc}
}

func (c *orderServiceClient) CreateOrder(ctx context.Context, in *CreatOrderReq, opts ...grpc.CallOption) (OrderService_CreateOrderClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &OrderService_ServiceDesc.Streams[0], OrderService_CreateOrder_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &orderServiceCreateOrderClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OrderService_CreateOrderClient interface {
	Recv() (*CreateOrderRes, error)
	grpc.ClientStream
}

type orderServiceCreateOrderClient struct {
	grpc.ClientStream
}

func (x *orderServiceCreateOrderClient) Recv() (*CreateOrderRes, error) {
	m := new(CreateOrderRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *orderServiceClient) GetInfoOrder(ctx context.Context, in *GetInfoOrderReq, opts ...grpc.CallOption) (*Order, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Order)
	err := c.cc.Invoke(ctx, OrderService_GetInfoOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetAllInfoOrder(ctx context.Context, in *GetAllInfoOrderReq, opts ...grpc.CallOption) (*GetAllInfoOrderRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllInfoOrderRes)
	err := c.cc.Invoke(ctx, OrderService_GetAllInfoOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) DeleteOrder(ctx context.Context, in *DeleteOrderReq, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, OrderService_DeleteOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServiceServer is the server API for OrderService service.
// All implementations must embed UnimplementedOrderServiceServer
// for forward compatibility
type OrderServiceServer interface {
	CreateOrder(*CreatOrderReq, OrderService_CreateOrderServer) error
	GetInfoOrder(context.Context, *GetInfoOrderReq) (*Order, error)
	GetAllInfoOrder(context.Context, *GetAllInfoOrderReq) (*GetAllInfoOrderRes, error)
	DeleteOrder(context.Context, *DeleteOrderReq) (*Empty, error)
	mustEmbedUnimplementedOrderServiceServer()
}

// UnimplementedOrderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrderServiceServer struct {
}

func (UnimplementedOrderServiceServer) CreateOrder(*CreatOrderReq, OrderService_CreateOrderServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedOrderServiceServer) GetInfoOrder(context.Context, *GetInfoOrderReq) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfoOrder not implemented")
}
func (UnimplementedOrderServiceServer) GetAllInfoOrder(context.Context, *GetAllInfoOrderReq) (*GetAllInfoOrderRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllInfoOrder not implemented")
}
func (UnimplementedOrderServiceServer) DeleteOrder(context.Context, *DeleteOrderReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrder not implemented")
}
func (UnimplementedOrderServiceServer) mustEmbedUnimplementedOrderServiceServer() {}

// UnsafeOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServiceServer will
// result in compilation errors.
type UnsafeOrderServiceServer interface {
	mustEmbedUnimplementedOrderServiceServer()
}

func RegisterOrderServiceServer(s grpc.ServiceRegistrar, srv OrderServiceServer) {
	s.RegisterService(&OrderService_ServiceDesc, srv)
}

func _OrderService_CreateOrder_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CreatOrderReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrderServiceServer).CreateOrder(m, &orderServiceCreateOrderServer{ServerStream: stream})
}

type OrderService_CreateOrderServer interface {
	Send(*CreateOrderRes) error
	grpc.ServerStream
}

type orderServiceCreateOrderServer struct {
	grpc.ServerStream
}

func (x *orderServiceCreateOrderServer) Send(m *CreateOrderRes) error {
	return x.ServerStream.SendMsg(m)
}

func _OrderService_GetInfoOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetInfoOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetInfoOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetInfoOrder(ctx, req.(*GetInfoOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetAllInfoOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllInfoOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetAllInfoOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetAllInfoOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetAllInfoOrder(ctx, req.(*GetAllInfoOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_DeleteOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).DeleteOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_DeleteOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).DeleteOrder(ctx, req.(*DeleteOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderService_ServiceDesc is the grpc.ServiceDesc for OrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "OrderService",
	HandlerType: (*OrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInfoOrder",
			Handler:    _OrderService_GetInfoOrder_Handler,
		},
		{
			MethodName: "GetAllInfoOrder",
			Handler:    _OrderService_GetAllInfoOrder_Handler,
		},
		{
			MethodName: "DeleteOrder",
			Handler:    _OrderService_DeleteOrder_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateOrder",
			Handler:       _OrderService_CreateOrder_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/order/order.proto",
}
